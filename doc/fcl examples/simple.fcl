// Block definition (there may be more than one block per file)
FUNCTION_BLOCK baschet

// Define input variables
VAR_INPUT
    l1cache : REAL;
    transistors : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    l2cache : REAL;
END_VAR


FUZZIFY l1cache
    TERM small := (0, 1) (30, 1) (40, 0) ;
    TERM big := (30, 0) (40,1) (100,1);
END_FUZZIFY


FUZZIFY transistors
    TERM few := (0, 1) (180, 1) (200,0) ;
    TERM many := (180,0) (200,1) (240,1);
END_FUZZIFY

DEFUZZIFY l2cache
    TERM small := (0,1) (40,1) (60,0);
    TERM medium := (40,0) (60,1) (70,1) (90,0);
    TERM big := (70,0) (100,1);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 15 (if no rule activates defuzzifier)
    DEFAULT := 70;
END_DEFUZZIFY


RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : SUM;

    RULE 1 : IF l1cache IS small AND transistors IS many
                THEN l2cache IS big;
    RULE 2 : IF l1cache IS small AND transistors IS few
                THEN l2cache IS medium;
    RULE 3 : IF l1cache IS big AND transistors IS many
                THEN l2cache IS medium;
    RULE 4 : IF l1cache IS big AND transistors IS few
                THEN l2cache IS small;

END_RULEBLOCK
END_FUNCTION_BLOCK